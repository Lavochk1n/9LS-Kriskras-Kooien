//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/StackThatBulance/SharedCursor.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SharedCursor: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SharedCursor()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SharedCursor"",
    ""maps"": [
        {
            ""name"": ""PlayerOne"",
            ""id"": ""96c46164-6a8f-4756-b4de-0da7edff9ce9"",
            ""actions"": [
                {
                    ""name"": ""HotizontalMovement"",
                    ""type"": ""Value"",
                    ""id"": ""7202ffd9-950c-4bf1-9a7f-29a08dea94d6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grap"",
                    ""type"": ""Button"",
                    ""id"": ""ca5f335b-5eaa-41f4-9aa1-7f7517338242"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""LeftKeyboard"",
                    ""id"": ""e7c293e0-4a38-444b-ace4-6495bf48580e"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HotizontalMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""ca4224de-e3de-42d5-bf0e-9b950ea21a11"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HotizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""a901ebb1-e0a0-4f01-86f6-832e1eb3df4a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HotizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6041ec30-d57c-4895-833e-d008a214dd83"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""D-Pad"",
                    ""id"": ""c9b479de-2e5b-4fbc-ab76-28a2dd76969e"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HotizontalMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""391533ce-52cb-4df7-9c86-03755b121796"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HotizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""0c77a75a-1176-4511-812a-0930aa8dab5f"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HotizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f1753200-b87a-4158-afc9-158096405ac5"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerTwo"",
            ""id"": ""17876003-69ae-4b7b-a1c0-c67503c5c186"",
            ""actions"": [
                {
                    ""name"": ""VerticalMovement"",
                    ""type"": ""Value"",
                    ""id"": ""9eef5370-f4ab-4d56-9846-50d79cc27871"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grap"",
                    ""type"": ""Button"",
                    ""id"": ""6466567e-63e2-4bb7-9c6b-7e83fdc959dd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""rightKeyboard"",
                    ""id"": ""0756644f-4455-4a34-bfda-f925fb0e51ac"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""133442a8-9d2e-468f-af11-5cf48adb01db"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""1f38c17b-e9bf-49d8-a7fa-82f054dbb52a"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6099649b-9fc6-4963-89eb-bf8f0641945a"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1ccc9ab-007a-40d3-852b-cf4ccc236e56"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerOne
        m_PlayerOne = asset.FindActionMap("PlayerOne", throwIfNotFound: true);
        m_PlayerOne_HotizontalMovement = m_PlayerOne.FindAction("HotizontalMovement", throwIfNotFound: true);
        m_PlayerOne_Grap = m_PlayerOne.FindAction("Grap", throwIfNotFound: true);
        // PlayerTwo
        m_PlayerTwo = asset.FindActionMap("PlayerTwo", throwIfNotFound: true);
        m_PlayerTwo_VerticalMovement = m_PlayerTwo.FindAction("VerticalMovement", throwIfNotFound: true);
        m_PlayerTwo_Grap = m_PlayerTwo.FindAction("Grap", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerOne
    private readonly InputActionMap m_PlayerOne;
    private List<IPlayerOneActions> m_PlayerOneActionsCallbackInterfaces = new List<IPlayerOneActions>();
    private readonly InputAction m_PlayerOne_HotizontalMovement;
    private readonly InputAction m_PlayerOne_Grap;
    public struct PlayerOneActions
    {
        private @SharedCursor m_Wrapper;
        public PlayerOneActions(@SharedCursor wrapper) { m_Wrapper = wrapper; }
        public InputAction @HotizontalMovement => m_Wrapper.m_PlayerOne_HotizontalMovement;
        public InputAction @Grap => m_Wrapper.m_PlayerOne_Grap;
        public InputActionMap Get() { return m_Wrapper.m_PlayerOne; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerOneActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerOneActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerOneActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerOneActionsCallbackInterfaces.Add(instance);
            @HotizontalMovement.started += instance.OnHotizontalMovement;
            @HotizontalMovement.performed += instance.OnHotizontalMovement;
            @HotizontalMovement.canceled += instance.OnHotizontalMovement;
            @Grap.started += instance.OnGrap;
            @Grap.performed += instance.OnGrap;
            @Grap.canceled += instance.OnGrap;
        }

        private void UnregisterCallbacks(IPlayerOneActions instance)
        {
            @HotizontalMovement.started -= instance.OnHotizontalMovement;
            @HotizontalMovement.performed -= instance.OnHotizontalMovement;
            @HotizontalMovement.canceled -= instance.OnHotizontalMovement;
            @Grap.started -= instance.OnGrap;
            @Grap.performed -= instance.OnGrap;
            @Grap.canceled -= instance.OnGrap;
        }

        public void RemoveCallbacks(IPlayerOneActions instance)
        {
            if (m_Wrapper.m_PlayerOneActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerOneActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerOneActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerOneActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerOneActions @PlayerOne => new PlayerOneActions(this);

    // PlayerTwo
    private readonly InputActionMap m_PlayerTwo;
    private List<IPlayerTwoActions> m_PlayerTwoActionsCallbackInterfaces = new List<IPlayerTwoActions>();
    private readonly InputAction m_PlayerTwo_VerticalMovement;
    private readonly InputAction m_PlayerTwo_Grap;
    public struct PlayerTwoActions
    {
        private @SharedCursor m_Wrapper;
        public PlayerTwoActions(@SharedCursor wrapper) { m_Wrapper = wrapper; }
        public InputAction @VerticalMovement => m_Wrapper.m_PlayerTwo_VerticalMovement;
        public InputAction @Grap => m_Wrapper.m_PlayerTwo_Grap;
        public InputActionMap Get() { return m_Wrapper.m_PlayerTwo; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerTwoActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerTwoActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerTwoActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerTwoActionsCallbackInterfaces.Add(instance);
            @VerticalMovement.started += instance.OnVerticalMovement;
            @VerticalMovement.performed += instance.OnVerticalMovement;
            @VerticalMovement.canceled += instance.OnVerticalMovement;
            @Grap.started += instance.OnGrap;
            @Grap.performed += instance.OnGrap;
            @Grap.canceled += instance.OnGrap;
        }

        private void UnregisterCallbacks(IPlayerTwoActions instance)
        {
            @VerticalMovement.started -= instance.OnVerticalMovement;
            @VerticalMovement.performed -= instance.OnVerticalMovement;
            @VerticalMovement.canceled -= instance.OnVerticalMovement;
            @Grap.started -= instance.OnGrap;
            @Grap.performed -= instance.OnGrap;
            @Grap.canceled -= instance.OnGrap;
        }

        public void RemoveCallbacks(IPlayerTwoActions instance)
        {
            if (m_Wrapper.m_PlayerTwoActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerTwoActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerTwoActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerTwoActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerTwoActions @PlayerTwo => new PlayerTwoActions(this);
    public interface IPlayerOneActions
    {
        void OnHotizontalMovement(InputAction.CallbackContext context);
        void OnGrap(InputAction.CallbackContext context);
    }
    public interface IPlayerTwoActions
    {
        void OnVerticalMovement(InputAction.CallbackContext context);
        void OnGrap(InputAction.CallbackContext context);
    }
}
