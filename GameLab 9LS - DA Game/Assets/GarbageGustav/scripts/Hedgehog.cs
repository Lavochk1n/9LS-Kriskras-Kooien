//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Assets/GarbageGustav/scripts/Hedgehog.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Hedgehog: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Hedgehog()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Hedgehog"",
    ""maps"": [
        {
            ""name"": ""Player1"",
            ""id"": ""a37dbf70-acee-433b-98d4-755d214c39b5"",
            ""actions"": [
                {
                    ""name"": ""P1Movement"",
                    ""type"": ""Value"",
                    ""id"": ""7bca9975-7b30-4e09-8ef5-3e293b135861"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grap"",
                    ""type"": ""Button"",
                    ""id"": ""6b375336-9476-4fb0-b5df-bdc09993dbbc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""ab19c13c-4b35-4996-a30b-1310b390a7e4"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P1Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5acb37e8-11bd-4a73-ba2b-c1f0d026671f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P1Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5591f228-e363-4330-8212-ed52ea6bc3e7"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P1Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""85ff0ed0-af86-4082-874a-e1fbf4bae08b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P1Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""93b21d15-a8c0-4141-8e8d-b087cc30c83c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P1Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""25856913-c68a-4316-b889-ca97a41a0263"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P1Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""fb93a3a7-fd29-40ea-8180-09331e4c1fdc"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P1Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d286c6c0-b0b4-42a4-a12c-b43ff6350fe1"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player2"",
            ""id"": ""66f6bfbc-824e-4b7c-9b2c-864fa20ee760"",
            ""actions"": [
                {
                    ""name"": ""P2Movement"",
                    ""type"": ""Value"",
                    ""id"": ""c625a705-431c-4b34-af33-1d316b3affaf"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grap"",
                    ""type"": ""Button"",
                    ""id"": ""605b000f-c50d-47d7-9699-8f9cae60bdf5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""ec92e792-c694-403b-a4af-1908bf97c4d0"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P2Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""baca8ece-cbda-42c4-aac9-d89678c5a654"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P2Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ad412331-dd35-43f5-9d35-90409a6dcd3b"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P2Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ac92a843-5aeb-4303-a236-0c7309468d7e"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P2Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8cdc5703-c080-4e62-9d02-fc48040e176d"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P2Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""8112b6a5-0a24-4565-b6ed-bc0fbac7cc5b"",
                    ""path"": ""<Keyboard>/rightShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P2Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""5ec66d08-01c6-4c05-9872-adfa94d3b29c"",
                    ""path"": ""<Keyboard>/rightCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P2Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""076eafd2-8169-4c33-a64f-edbd38d688c5"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player1
        m_Player1 = asset.FindActionMap("Player1", throwIfNotFound: true);
        m_Player1_P1Movement = m_Player1.FindAction("P1Movement", throwIfNotFound: true);
        m_Player1_Grap = m_Player1.FindAction("Grap", throwIfNotFound: true);
        // Player2
        m_Player2 = asset.FindActionMap("Player2", throwIfNotFound: true);
        m_Player2_P2Movement = m_Player2.FindAction("P2Movement", throwIfNotFound: true);
        m_Player2_Grap = m_Player2.FindAction("Grap", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player1
    private readonly InputActionMap m_Player1;
    private List<IPlayer1Actions> m_Player1ActionsCallbackInterfaces = new List<IPlayer1Actions>();
    private readonly InputAction m_Player1_P1Movement;
    private readonly InputAction m_Player1_Grap;
    public struct Player1Actions
    {
        private @Hedgehog m_Wrapper;
        public Player1Actions(@Hedgehog wrapper) { m_Wrapper = wrapper; }
        public InputAction @P1Movement => m_Wrapper.m_Player1_P1Movement;
        public InputAction @Grap => m_Wrapper.m_Player1_Grap;
        public InputActionMap Get() { return m_Wrapper.m_Player1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player1Actions set) { return set.Get(); }
        public void AddCallbacks(IPlayer1Actions instance)
        {
            if (instance == null || m_Wrapper.m_Player1ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player1ActionsCallbackInterfaces.Add(instance);
            @P1Movement.started += instance.OnP1Movement;
            @P1Movement.performed += instance.OnP1Movement;
            @P1Movement.canceled += instance.OnP1Movement;
            @Grap.started += instance.OnGrap;
            @Grap.performed += instance.OnGrap;
            @Grap.canceled += instance.OnGrap;
        }

        private void UnregisterCallbacks(IPlayer1Actions instance)
        {
            @P1Movement.started -= instance.OnP1Movement;
            @P1Movement.performed -= instance.OnP1Movement;
            @P1Movement.canceled -= instance.OnP1Movement;
            @Grap.started -= instance.OnGrap;
            @Grap.performed -= instance.OnGrap;
            @Grap.canceled -= instance.OnGrap;
        }

        public void RemoveCallbacks(IPlayer1Actions instance)
        {
            if (m_Wrapper.m_Player1ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer1Actions instance)
        {
            foreach (var item in m_Wrapper.m_Player1ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player1ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player1Actions @Player1 => new Player1Actions(this);

    // Player2
    private readonly InputActionMap m_Player2;
    private List<IPlayer2Actions> m_Player2ActionsCallbackInterfaces = new List<IPlayer2Actions>();
    private readonly InputAction m_Player2_P2Movement;
    private readonly InputAction m_Player2_Grap;
    public struct Player2Actions
    {
        private @Hedgehog m_Wrapper;
        public Player2Actions(@Hedgehog wrapper) { m_Wrapper = wrapper; }
        public InputAction @P2Movement => m_Wrapper.m_Player2_P2Movement;
        public InputAction @Grap => m_Wrapper.m_Player2_Grap;
        public InputActionMap Get() { return m_Wrapper.m_Player2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player2Actions set) { return set.Get(); }
        public void AddCallbacks(IPlayer2Actions instance)
        {
            if (instance == null || m_Wrapper.m_Player2ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player2ActionsCallbackInterfaces.Add(instance);
            @P2Movement.started += instance.OnP2Movement;
            @P2Movement.performed += instance.OnP2Movement;
            @P2Movement.canceled += instance.OnP2Movement;
            @Grap.started += instance.OnGrap;
            @Grap.performed += instance.OnGrap;
            @Grap.canceled += instance.OnGrap;
        }

        private void UnregisterCallbacks(IPlayer2Actions instance)
        {
            @P2Movement.started -= instance.OnP2Movement;
            @P2Movement.performed -= instance.OnP2Movement;
            @P2Movement.canceled -= instance.OnP2Movement;
            @Grap.started -= instance.OnGrap;
            @Grap.performed -= instance.OnGrap;
            @Grap.canceled -= instance.OnGrap;
        }

        public void RemoveCallbacks(IPlayer2Actions instance)
        {
            if (m_Wrapper.m_Player2ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer2Actions instance)
        {
            foreach (var item in m_Wrapper.m_Player2ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player2ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player2Actions @Player2 => new Player2Actions(this);
    public interface IPlayer1Actions
    {
        void OnP1Movement(InputAction.CallbackContext context);
        void OnGrap(InputAction.CallbackContext context);
    }
    public interface IPlayer2Actions
    {
        void OnP2Movement(InputAction.CallbackContext context);
        void OnGrap(InputAction.CallbackContext context);
    }
}
